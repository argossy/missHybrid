install.packages("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/missHybrid_0.0.0.9000.tar.gz", repos = NULL, type = "source")
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/missHybrid")
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data")
library(devtools)
#dir1 = '../..' # if on PC and linux if folder is correctly placed
load_all(sprintf('missHybrid'))
#source('./hybrid_impute.R')
## simulate data
n = 100
p = 10
dat = matrix(rnorm(1000), 100,10)
## 10% missing
mis_rate = 0.1
for(j in 1:p){
idx_mis = sample(1:n, n * mis_rate, replace = FALSE)
dat[idx_mis, j ] = NA
}
# examples of two-phase imputation
# phase 1: missMDA; phase 2: missForest
Ximp = missHyb(X = dat, p1 = 'MDA', p2 = 'MF') # or missHyb(dat, 'MDA', 'MF')
# phase 1: missForest; phase 2: MDA
Ximp = missHyb(X = dat, p1 = 'MF', p2 = 'MDA')
# phase 1: KNN; phase 2: missMDA
Ximp = missHyb(X = dat, p1 = 'KNN', p2 = 'MDA')
source("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/test.R", echo=TRUE)
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data")
knitr::opts_chunk$set(echo = TRUE)
library(usethis)
# #dataset = 'yr1'
# dir_wk = 'OneDrive - University of North Carolina at Chapel Hill/github/missing_data'
# if(Sys.info()["sysname"] == 'Windows'){
#   dir1 = sprintf('C:/Users/kxia/%s', dir_wk)
# } else{
#   dir1 = sprintf('/Users/kaixia/%s', dir_wk)
# }
#setwd(dir1)
#create_package("missHybrid", roxygen=FALSE)
#list.files("missHybrid")
library(devtools)
build("missHybrid")
install.packages("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/missHybrid_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(missHybrid)
#source('./hybrid_impute.R')
## simulate data
n = 100
p = 10
dat = matrix(rnorm(1000), 100,10)
## 10% missing
mis_rate = 0.1
for(j in 1:p){
idx_mis = sample(1:n, n * mis_rate, replace = FALSE)
dat[idx_mis, j ] = NA
}
# examples of two-phase imputation
# phase 1: missMDA; phase 2: missForest
Ximp = missHyb(X = dat, p1 = 'MDA', p2 = 'MF') # or missHyb(dat, 'MDA', 'MF')
library(missMDA)
#source('./hybrid_impute.R')
## simulate data
n = 100
p = 10
dat = matrix(rnorm(1000), 100,10)
## 10% missing
mis_rate = 0.1
for(j in 1:p){
idx_mis = sample(1:n, n * mis_rate, replace = FALSE)
dat[idx_mis, j ] = NA
}
# examples of two-phase imputation
# phase 1: missMDA; phase 2: missForest
Ximp = missHyb(X = dat, p1 = 'MDA', p2 = 'MF') # or missHyb(dat, 'MDA', 'MF')
# phase 1: missForest; phase 2: MDA
Ximp = missHyb(X = dat, p1 = 'MF', p2 = 'MDA')
library(missForest)
#source('./hybrid_impute.R')
## simulate data
n = 100
#source('./hybrid_impute.R')
## simulate data
n = 100
p = 10
dat = matrix(rnorm(1000), 100,10)
## 10% missing
mis_rate = 0.1
for(j in 1:p){
idx_mis = sample(1:n, n * mis_rate, replace = FALSE)
dat[idx_mis, j ] = NA
}
# examples of two-phase imputation
# phase 1: missMDA; phase 2: missForest
Ximp = missHyb(X = dat, p1 = 'MDA', p2 = 'MF') # or missHyb(dat, 'MDA', 'MF')
# phase 1: missForest; phase 2: MDA
Ximp = missHyb(X = dat, p1 = 'MF', p2 = 'MDA')
# phase 1: KNN; phase 2: missMDA
Ximp = missHyb(X = dat, p1 = 'KNN', p2 = 'MDA')
library(bnstruct)
#source('./hybrid_impute.R')
## simulate data
n = 100
p = 10
dat = matrix(rnorm(1000), 100,10)
## 10% missing
mis_rate = 0.1
for(j in 1:p){
idx_mis = sample(1:n, n * mis_rate, replace = FALSE)
dat[idx_mis, j ] = NA
}
# examples of two-phase imputation
# phase 1: missMDA; phase 2: missForest
Ximp = missHyb(X = dat, p1 = 'MDA', p2 = 'MF') # or missHyb(dat, 'MDA', 'MF')
# phase 1: missForest; phase 2: MDA
Ximp = missHyb(X = dat, p1 = 'MF', p2 = 'MDA')
# phase 1: KNN; phase 2: missMDA
Ximp = missHyb(X = dat, p1 = 'KNN', p2 = 'MDA')
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQ")
source("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQ/missSVA_mixed_longleaf_iter_v0.33.R", echo=TRUE)
warnings()
View(forest.g11)
View(Z110f)
View(forest.pred11)
test=missForest::missForest(xmis=Z110f)$ximp
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQf")
test
source("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQf/load_dataset.R", echo=TRUE)
data_types
source("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQf/load_dataset.R", echo=TRUE)
table(dat1[,j])
length(table(dat1[,j]))
length(table(dat1[,2]))
length(table(dat1[,3]))
length(table(dat1[,3]))
### convert to factor if less than 10 category
for(j in 1:dim(dat1)[2]){
if(length(table(dat1[,j])) < 10 & data_types[j] == 'numeric'){
dat1[,j] = as.factor(dat1[,j])
data_types[j] = 'ordinal'
print(j)
}
}
dir_data_raw = '.'
filein_info = sprintf('%s/ubk_survey_info_clean.csv', dir_data_raw)
info1 = read.csv(filein_info)
data_types = info1$data.type
data_types_load = data_types
# First, remove nominal data, convert binary to number for PCA method, convert ordinal to numeric
# Run missForest (support both binary and numeric), KNN (numeric and categorical),
# MDA (computationally feasible only using numeric) and autocomplete (binary and numeric)
#
#data_types[data_types == 'ordinal'] = 'numeric'
#data_types_load[data_types_load %in% c('binary','nominal','ordinal')] = 'factor'
## only keep binary and nominal as factor
## then remove nominal in the follow steps
data_types_load[data_types_load %in% c('binary','nominal','ordinal')] = 'factor'
#data_types_load[data_types_load %in% c('ordinal')] = 'numeric'
data_types_load = c('character',data_types_load)
filein_impute = sprintf('%s/ubk_survey_clean.csv',dir_data_raw)
dat1 = read.csv(filein_impute, colClasses = data_types_load)
#dat1 = read.csv(filein_impute)
dat1 = dat1[,-1]
## remove all the nominal variables
col_keep = which(data_types != 'nominal')
dat1 = dat1[, col_keep]
data_types = data_types[col_keep]
#data_types = data_types[-1]
#dat1 = convert_matrix_ordinal2num(dat1, data_types = data_types)
## remove subject with too many missing
rate_miss = apply(is.na(dat1), 1, sum) / dim(dat1)[2]
idx_keep = rate_miss < 0.5
dat1 = dat1[idx_keep, ]
### convert to factor if less than 10 category
for(j in 1:dim(dat1)[2]){
if(length(table(dat1[,j])) < 10 & data_types[j] == 'numeric'){
dat1[,j] = as.factor(dat1[,j])
data_types[j] = 'ordinal'
print(j)
}
}
data_types
1:dim(dat1)[2]
length(table(dat1[,j]))
length(table(dat1[,1]))
length(table(dat1[,1\2]))
length(table(dat1[,2]))
length(table(dat1[,3]))
data_types
which(data_types == 'numeric')
length(table(dat1[,5]))
length(table(dat1[,7]))
length(table(dat1[,8]))
length(table(dat1[,9]))
length(table(dat1[,12]))
length(table(dat1[,53]))
length(table(dat1[,54]))
length(table(dat1[,56]))
length(table(dat1[,64]))
length(table(dat1[,65]))
length(table(dat1[,66]))
length(table(dat1[,74]))
length(table(dat1[,75]))
length(table(dat1[,90]))
length(table(dat1[,93]))
length(table(dat1[,94]))
setwd("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQf")
source("~/Library/CloudStorage/OneDrive-UniversityofNorthCarolinaatChapelHill/github/missing_data/scripts/UKBQf/missSVA_mixed_longleaf_iter_v0.33.R", echo=TRUE)
warnings()
View(dat_autocom)
View(autocom.pred11)
View(forest.pred11)
View(forest.g11)
View(knn.pred11)
View(forest.pred11)
Z110f[1:5,1:5]
forest.g11[1:5,1:5]
forest.pred11[1:5,1:5]
str(forest.pred11)
str(knn.pred11)
class(knn.pred11)
knn.pred11[1:5,1:5]
str(knn.pred11)
View(forest.g11)
knn.pred11[1:5,1:5]
Z11m.pred11[1:5,1:5]
Z11m.copy[1:5,1:5]
forest.pred11[1:5,1:5]
soft.pred11[1:5,1:5]
mda.pred11[1:5,1:5]
knn.si.pred11[1:5,1:5]
knn.mda.pred11[1:5,1:5]
rf.si.pred11[1:5,1:5]
rf.mda.pred11[1:5,1:5]
mda.knn.pred11[1:5,1:5]
rf.knn.pred11[1:5,1:5]
knn.rf.pred11[1:5,1:5]
knn.rf.pred11[,1]
knn.rf.pred11[,2]
mda.pred11[,2]
forest.pred11[,2]
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AgiMicroRna")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
library(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(xtable) # table
library(mixOmics)
library(sva) # ComBat
